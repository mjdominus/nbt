
* Maps have scale and position data in them.  So it wouldn't be hard to
  write a program that would take a directory full of maps (like in
  maps/ here) and stitch them together into a single map.

  o So far so good!  Now, sort the input maps in order of decreasing
    scale so that high-resolution patches are not overwritten by
    low-resolution patches

o The banner data is in there; you could easily put the banners on the
  map.  Similarly "frames".

o Maybe an external file with user-defined list of landmarks

* Maybe a command-line flag to show the boundaries of each of the
  maps?

o Maybe annotate each map with its number?

  How to position the annotations though? Wherever you put them they
  might obscure something important.  Also, unless you put each one in
  the center of its map, they might overlap.

  Idea: instead of painting them on in some fixed color, paint them on
  by desaturating the pixels under the labels.

o Sometimes you have two maps that cover the exact same
  territory. Only the newest one should be rendered.

o Treasure maps mess up the output.  You need to identify them somehow
  and omit them, or maybe use them only as a last resort.  How to
  identify them?

  Maybe just if the map has too many brown pixels?  (color=26?)
  Histogramming the pixels does not take long, there are only 16384 of
  them.  Then the treasure map could be rendered first so it would be
  overwritten by better maps later.

  Do this after you build in the automatic sorting feature.

  * According to `histogram`, a typical treasure map has:
      
                color count
                  0   13445
                 15    2125
                 26     814

    An ordinary map looks nothing like this.

o Today you had a treasure map that was like a million miles from
  everything else, and the resulting composite map had to be enormous
  to include it.  It took four and a half minutes to write out the
  300-megapixel image.  Some sort of warning would be good here.  But
  when should it be issued?

  Maybe if the resulting canvas has low density (easy to measure:
  (len(canvas) รท (xsize  * ysize)) look for weird outliers?


