#!/usr/bin/python3

from nbt import nbt
import sys
from sys import argv, stderr
from pixmap import pixmap

if len(argv) < 2: raise Exception("Usage: dumpmap decompressed-map-files...")

cmap = [(32,32,32),                # UNKNOWN
        (127,178,56),           # GRASS
        (247,233,163),          # SAND
        (199,199,199),          # CLOTH
        (255, 0, 0),            # TNT
        (160, 160, 255),        # ICE     5
        (167, 167, 167),        # IRON
        (0, 124, 0),            # FOLIAGE
        (255, 255, 255),        # SNOW
        (164, 168, 184),        # CLAY
        (151, 109, 77),         # DIRT    10
        (112, 112, 112),        # STONE
        (64, 64, 255),          # WATER
        (143, 119, 72),         # WOOD
        ]


shade_frac = [180/255, 220/255, 1, 135/255]

pm = pixmap()

scale_factor = [1, 2, 4, 8, 16]

for filename in argv[1:]:
    f = nbt(file=filename).contents
    data = f["data"]["data"]

    scale = scale_factor[int(data["scale"])]
    xc = data["xCenter"]
    zc = data["zCenter"]
    print(f'map {filename}: ({xc},{zc}) scale {scale}', file=stderr)
    
    colors = data["colors"]
    if len(colors) != 16384:
        raise Exception("File %s: Unexpected length %d" %
                        (filename, len(colors)))


    missing_colors = set()

    y = -64
    x = -64
    for c in colors:
        shade = c % 4
        c = int(c/4)
        if c in range(len(cmap)):
            base_col = cmap[c]
        else:
            missing_colors.add(c)
            base_col = None

        if c == 0 or base_col is None:
            pass
        else:
            col = [ int(x * shade_frac[shade]) for x in base_col ]
            for i in range(scale):
                for j in range(scale):
                    pm.set(x * scale + xc + i, y * scale + zc + j, col)
        x += 1
        if x == 64:
            x = -64
            y += 1

pm.dump_ppm(sys.stdout)
if missing_colors:
    print(f'Indices missing from colors table: {missing_colors}', file=stderr)

