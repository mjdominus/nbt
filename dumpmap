#!/usr/bin/python3

from nbt import nbt
import sys
from sys import argv, stderr
from pixmap import pixmap

def argparser():
    import argparse
    parser = argparse.ArgumentParser(description="Turn minecraft map.dat files into a single composite image")
    parser.add_argument('--verbose', action='store_true')
    parser.add_argument('-d', '--default-color', help="Color for unvisited areas in the form RGB or RRGGBB (default: gray)", default="808080")
    parser.add_argument('mapfiles', nargs='+', help="files containing *uncompressed* nbt data")
    parser.add_argument('-b', '--borders', action='store_true', help="draw borders around map fragments")
    return parser

def interpret_color(s):
    if len(s) == 3:
        s = s[0] + s[0] + s[1] + s[1] + s[2] + s[2]
    if len(s) == 6:
        return (int(s[0:2], 16),
                int(s[2:4], 16),
                int(s[4:6], 16));
    raise Exception("Unrecognized color '%s'" % s);

args = argparser().parse_args()

colors=[(32,32,32),                # UNKNOWN
        (127,178,56),           # GRASS
        (247,233,163),          # SAND
        (199,199,199),          # CLOTH
        (255, 0, 0),            # TNT
        (160, 160, 255),        # ICE     5
        (167, 167, 167),        # IRON
        (0, 124, 0),            # FOLIAGE
        (255, 255, 255),        # SNOW
        (164, 168, 184),        # CLAY
        (151, 109, 77),         # DIRT    10
        (112, 112, 112),        # STONE
        (64, 64, 255),          # WATER
        (143, 119, 72),         # WOOD
        (255, 252, 245),        # QUARTZ
        (216, 127, 51),         # ADOBE   15
        (178, 76, 216),         # MAGENTA
        (102, 153, 216),        # LIGHT BLUE
        
]
cmap = dict([ (i, colors[i]) for i in range(len(colors)) ])
cmap[28] = (153, 51, 51)        # RED
cmap[35] = (112,2,0)            # NETHERRACK
cmap[26] = (102,76,51)          # BROWN
cmap[19] = (127,204,25)         # LIME
cmap[29] = (25,25,25)           # BLACK
cmap[25] = (51,76,178)          # BLUE

shade_frac = [180/255, 220/255, 1, 135/255]

pm = pixmap(default_pixel=interpret_color(args.default_color))

scale_factor = [1, 2, 4, 8, 16]

for filename in args.mapfiles:
    f = nbt(file=filename).contents
    data = f["data"]["data"]

    scale = scale_factor[int(data["scale"])]
    xc = data["xCenter"]
    zc = data["zCenter"]
    print(f'map {filename}: ({xc},{zc}) scale {scale}', file=stderr)
    
    colors = data["colors"]
    if len(colors) != 16384:
        raise Exception("File %s: Unexpected length %d" %
                        (filename, len(colors)))


    missing_colors = set()

    y = -64
    x = -64
    for c in colors:

        shade = c % 4
        c = int(c/4)
        if c in cmap:
            base_col = cmap[c]
        else:
            missing_colors.add(c)
            base_col = None

        if c == 0 or base_col is None:
            pass
        else:
            pixel_color = [ int(component * shade_frac[shade]) for component in base_col ]
            for i in range(scale):
                for j in range(scale):
                    col = pixel_color
                    if args.borders:
                        if x == -64 and i == 0 or x == 63 and i == scale-1:
                            col = (0,0,0)
                        elif y == -64 and j == 0 or y == 63 and j == scale-1:
                            col = (0,0,0)
                    pm.set(x * scale + xc + i, y * scale + zc + j, col)
        x += 1
        if x == 64:
            x = -64
            y += 1

pm.dump_ppm(sys.stdout)
if missing_colors:
    print(f'Indices missing from colors table: {missing_colors}', file=stderr)

